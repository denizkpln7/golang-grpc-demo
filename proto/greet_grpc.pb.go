// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.2
// source: proto/greet.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GreetServiceClient is the client API for GreetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GreetServiceClient interface {
	SaveUser(ctx context.Context, in *SaveRequest, opts ...grpc.CallOption) (*User, error)
	GetUsersEmail(ctx context.Context, opts ...grpc.CallOption) (GreetService_GetUsersEmailClient, error)
	GetIdUserMail(ctx context.Context, in *User, opts ...grpc.CallOption) (GreetService_GetIdUserMailClient, error)
	GetAlllUser(ctx context.Context, opts ...grpc.CallOption) (GreetService_GetAlllUserClient, error)
}

type greetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGreetServiceClient(cc grpc.ClientConnInterface) GreetServiceClient {
	return &greetServiceClient{cc}
}

func (c *greetServiceClient) SaveUser(ctx context.Context, in *SaveRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/greet_service.GreetService/SaveUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greetServiceClient) GetUsersEmail(ctx context.Context, opts ...grpc.CallOption) (GreetService_GetUsersEmailClient, error) {
	stream, err := c.cc.NewStream(ctx, &GreetService_ServiceDesc.Streams[0], "/greet_service.GreetService/GetUsersEmail", opts...)
	if err != nil {
		return nil, err
	}
	x := &greetServiceGetUsersEmailClient{stream}
	return x, nil
}

type GreetService_GetUsersEmailClient interface {
	Send(*SaveRequest) error
	CloseAndRecv() (*User, error)
	grpc.ClientStream
}

type greetServiceGetUsersEmailClient struct {
	grpc.ClientStream
}

func (x *greetServiceGetUsersEmailClient) Send(m *SaveRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *greetServiceGetUsersEmailClient) CloseAndRecv() (*User, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(User)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greetServiceClient) GetIdUserMail(ctx context.Context, in *User, opts ...grpc.CallOption) (GreetService_GetIdUserMailClient, error) {
	stream, err := c.cc.NewStream(ctx, &GreetService_ServiceDesc.Streams[1], "/greet_service.GreetService/GetIdUserMail", opts...)
	if err != nil {
		return nil, err
	}
	x := &greetServiceGetIdUserMailClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GreetService_GetIdUserMailClient interface {
	Recv() (*SaveRequest, error)
	grpc.ClientStream
}

type greetServiceGetIdUserMailClient struct {
	grpc.ClientStream
}

func (x *greetServiceGetIdUserMailClient) Recv() (*SaveRequest, error) {
	m := new(SaveRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greetServiceClient) GetAlllUser(ctx context.Context, opts ...grpc.CallOption) (GreetService_GetAlllUserClient, error) {
	stream, err := c.cc.NewStream(ctx, &GreetService_ServiceDesc.Streams[2], "/greet_service.GreetService/GetAlllUser", opts...)
	if err != nil {
		return nil, err
	}
	x := &greetServiceGetAlllUserClient{stream}
	return x, nil
}

type GreetService_GetAlllUserClient interface {
	Send(*SaveRequest) error
	Recv() (*User, error)
	grpc.ClientStream
}

type greetServiceGetAlllUserClient struct {
	grpc.ClientStream
}

func (x *greetServiceGetAlllUserClient) Send(m *SaveRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *greetServiceGetAlllUserClient) Recv() (*User, error) {
	m := new(User)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GreetServiceServer is the server API for GreetService service.
// All implementations must embed UnimplementedGreetServiceServer
// for forward compatibility
type GreetServiceServer interface {
	SaveUser(context.Context, *SaveRequest) (*User, error)
	GetUsersEmail(GreetService_GetUsersEmailServer) error
	GetIdUserMail(*User, GreetService_GetIdUserMailServer) error
	GetAlllUser(GreetService_GetAlllUserServer) error
	mustEmbedUnimplementedGreetServiceServer()
}

// UnimplementedGreetServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGreetServiceServer struct {
}

func (UnimplementedGreetServiceServer) SaveUser(context.Context, *SaveRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveUser not implemented")
}
func (UnimplementedGreetServiceServer) GetUsersEmail(GreetService_GetUsersEmailServer) error {
	return status.Errorf(codes.Unimplemented, "method GetUsersEmail not implemented")
}
func (UnimplementedGreetServiceServer) GetIdUserMail(*User, GreetService_GetIdUserMailServer) error {
	return status.Errorf(codes.Unimplemented, "method GetIdUserMail not implemented")
}
func (UnimplementedGreetServiceServer) GetAlllUser(GreetService_GetAlllUserServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAlllUser not implemented")
}
func (UnimplementedGreetServiceServer) mustEmbedUnimplementedGreetServiceServer() {}

// UnsafeGreetServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreetServiceServer will
// result in compilation errors.
type UnsafeGreetServiceServer interface {
	mustEmbedUnimplementedGreetServiceServer()
}

func RegisterGreetServiceServer(s grpc.ServiceRegistrar, srv GreetServiceServer) {
	s.RegisterService(&GreetService_ServiceDesc, srv)
}

func _GreetService_SaveUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreetServiceServer).SaveUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greet_service.GreetService/SaveUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreetServiceServer).SaveUser(ctx, req.(*SaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GreetService_GetUsersEmail_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreetServiceServer).GetUsersEmail(&greetServiceGetUsersEmailServer{stream})
}

type GreetService_GetUsersEmailServer interface {
	SendAndClose(*User) error
	Recv() (*SaveRequest, error)
	grpc.ServerStream
}

type greetServiceGetUsersEmailServer struct {
	grpc.ServerStream
}

func (x *greetServiceGetUsersEmailServer) SendAndClose(m *User) error {
	return x.ServerStream.SendMsg(m)
}

func (x *greetServiceGetUsersEmailServer) Recv() (*SaveRequest, error) {
	m := new(SaveRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GreetService_GetIdUserMail_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(User)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GreetServiceServer).GetIdUserMail(m, &greetServiceGetIdUserMailServer{stream})
}

type GreetService_GetIdUserMailServer interface {
	Send(*SaveRequest) error
	grpc.ServerStream
}

type greetServiceGetIdUserMailServer struct {
	grpc.ServerStream
}

func (x *greetServiceGetIdUserMailServer) Send(m *SaveRequest) error {
	return x.ServerStream.SendMsg(m)
}

func _GreetService_GetAlllUser_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreetServiceServer).GetAlllUser(&greetServiceGetAlllUserServer{stream})
}

type GreetService_GetAlllUserServer interface {
	Send(*User) error
	Recv() (*SaveRequest, error)
	grpc.ServerStream
}

type greetServiceGetAlllUserServer struct {
	grpc.ServerStream
}

func (x *greetServiceGetAlllUserServer) Send(m *User) error {
	return x.ServerStream.SendMsg(m)
}

func (x *greetServiceGetAlllUserServer) Recv() (*SaveRequest, error) {
	m := new(SaveRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GreetService_ServiceDesc is the grpc.ServiceDesc for GreetService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GreetService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "greet_service.GreetService",
	HandlerType: (*GreetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveUser",
			Handler:    _GreetService_SaveUser_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetUsersEmail",
			Handler:       _GreetService_GetUsersEmail_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetIdUserMail",
			Handler:       _GreetService_GetIdUserMail_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAlllUser",
			Handler:       _GreetService_GetAlllUser_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/greet.proto",
}
